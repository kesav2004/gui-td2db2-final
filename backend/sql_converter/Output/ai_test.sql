CREATE OR REPLACE PROCEDURE DG_I_P_30INF_CBCI.PROC_UPDATE_MESSAGE_SPEC_REP_ENT (
IN par_COG_RUN_ID INTEGER,
IN par_ETL_RUN_ID INTEGER,
IN par_PROC_NR INTEGER,
OUT par_Status INTEGER
)
LANGUAGE SQL

BEGIN
   DECLARE par_ZERO_ROWS, par_ACT_UPD, par_ACT_INS, par_DBL_REP, par_MAX_ETL_RUN_ID, par_STEP, par_ERI_PROC, par_ERI_PROC_MS INTEGER DEFAULT 0;
   DECLARE par_SQLSTATE CHARACTER(5);
   DECLARE par_SQLMSG VARCHAR(118);
   DECLARE SEI VARCHAR(50);
   DECLARE TC VARCHAR(2);
   DECLARE RPER DATE;
   DECLARE REP VARCHAR(100);
   DECLARE RENA VARCHAR(200);
   DECLARE ERI INTEGER;
   DECLARE SD TIMESTAMP;
   DECLARE STMT1, STMT2 VARCHAR(1500);
   DECLARE cur_UPDATE CURSOR FOR S1;
   DECLARE EXIT HANDLER FOR SqlException
   BEGIN
      GET DIAGNOSTICS EXCEPTION 1 par_SQLMSG = Message_Text;
      ROLLBACK;
      UPDATE DG_I_P_30INF_CBCI.RUNCONTROL_30
      SET END_DATE = Current_Timestamp
      , RUN_RESULT = 'ERROR'
      , RUN_COMMENT = Coalesce(RUN_COMMENT, '') || 'SQLEXCEPTION after step ' || Trim(par_STEP) || ': ' || CHAR(par_SQLMSG) || '; '
      , ETL_RUN_ID_INT = 0
      WHERE COG_RUN_ID = par_COG_RUN_ID
      AND PROCEDURE_NUMBER = par_PROC_NR
      AND PROCEDURE_NAME = 'PROC_UPDATE_MESSAGE_SPEC_REP_ENT';
      SET par_STATUS = 1;
   END;
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      SELECT SqlState INTO par_SQLSTATE;
      ROLLBACK;
      UPDATE DG_I_P_30INF_CBCI.RUNCONTROL_30;
      SET END_DATE = Current_Timestamp;
      , RUN_RESULT = 'ERROR'
      , RUN_COMMENT = Coalesce(RUN_COMMENT, '') || 'SQLWARNING sqlstate: ' || CHAR(par_SQLSTATE) || ' after step ' || Trim(par_STEP) || '; '
      , ETL_RUN_ID_INT = 0
      WHERE COG_RUN_ID = par_COG_RUN_ID
      AND PROCEDURE_NUMBER = par_PROC_NR
      AND PROCEDURE_NAME = 'PROC_UPDATE_MESSAGE_SPEC_REP_ENT';
      SET par_STATUS = 1;
   END;
   INSERT INTO DG_I_P_30INF_CBCI.RUNCONTROL_30 (COG_RUN_ID, PROCEDURE_NUMBER, PROCEDURE_NAME, START_DATE);
   VALUES (par_COG_RUN_ID, par_PROC_NR, 'PROC_UPDATE_MESSAGE_SPEC_REP_ENT', Current_Timestamp);
   SELECT Coalesce(Max(ETL_RUN_ID),0) INTO par_ERI_PROC_MS
   FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT
   WHERE TRANSMITTINGCOUNTRY <> 'NL';
   IF par_ETL_RUN_ID < par_ERI_PROC_MS THEN
      SET par_ERI_PROC = par_ERI_PROC_MS;
      ELSE
      SET par_ERI_PROC = par_ETL_RUN_ID;
   END
   BT;
   INSERT INTO DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT(SENDINGENTITYIN, SENDINGENTITYNAME, TRANSMITTINGCOUNTRY,;
   CBCBODYID, REPORTINGENTITYTIN, RE_NAME_KEY, MESSAGETYPE, "LANGUAGE", "WARNING", CONTACT, EULOCALFILING, EUINCOMPLETE,
   MESSAGEREFID, MESSAGETYPEINDIC, REPORTINGPERIOD, "TIMESTAMP", RELNR,
   USEDSOFTWAREPACKAGE, X_BERICHTID, X_ONTVANGSTDATUMTIJD, ETL_RUN_ID,
   ETL_STG_TIMESTAMP, START_DATE, END_DATE, CURRENT_FLAG, COG_RUN_ID)
   SELECT DISTINCT Coalesce(M.SENDINGENTITYIN, '') AS SENDINGENTITYIN
   , M.SENDINGENTITYNAME
   , M.TRANSMITTINGCOUNTRY
   , S.CBCBODYID
   , S.REPORTINGENTITYTIN
   , S.RE_NAME_KEY
   , M.MESSAGETYPE
   , M."LANGUAGE"
   , M."WARNING"
   , M.CONTACT
   , M.EULOCALFILING
   , M.EUINCOMPLETE
   , M.MESSAGEREFID
   , M.MESSAGETYPEINDIC
   , M.REPORTINGPERIOD
   , M."TIMESTAMP"
   , M.RELNR
   , M.USEDSOFTWAREPACKAGE
   , M.X_BERICHTID
   , M.X_ONTVANGSTDATUMTIJD
   , M.ETL_RUN_ID
   , M.ETL_STG_TIMESTAMP
   , M.START_DATE
   , M.END_DATE
   , M.CURRENT_FLAG
   , par_COG_RUN_ID
   FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC AS M
   INNER JOIN (
   SELECT S1.MESSAGEREFID
   , S1.SENDINGENTITYIN
   , S1.TRANSMITTINGCOUNTRY
   , S1.TIN AS REPORTINGENTITYTIN
   , S1.RE_NAME_KEY
   , S1.CBCBODYID
   , S1.ETL_RUN_ID
   , S1.START_DATE
   , S1.END_DATE
   , S1.CURRENT_FLAG
   FROM DG_I_P_30INF_CBCI.REPORTING_ENTITY AS S1
   WHERE S1.ETL_RUN_ID > par_ERI_PROC
   UNION
   SELECT DISTINCT S2.MESSAGEREFID
   , S2.SENDINGENTITYIN
   , S2.TRANSMITTINGCOUNTRY
   , S2.REPORTINGENTITYTIN
   , S2.RE_NAME_KEY
   , S2.CBCBODYID
   , S2.ETL_RUN_ID
   , S2.START_DATE
   , S2.END_DATE
   , S2.CURRENT_FLAG
   FROM DG_I_P_30INF_CBCI.CBCREPORTS_SUMMARY AS S2
   WHERE S2.ETL_RUN_ID > par_ERI_PROC
   UNION
   SELECT DISTINCT S3.MESSAGEREFID
   , S3.SENDINGENTITYIN
   , S3.TRANSMITTINGCOUNTRY
   , S3.REPORTINGENTITYTIN
   , S3.RE_NAME_KEY
   , S3.CBCBODYID
   , S3.ETL_RUN_ID
   , S3.START_DATE
   , S3.END_DATE
   , S3.CURRENT_FLAG
   FROM DG_I_P_30INF_CBCI.ADDITIONAL_INFO AS S3
   WHERE S3.ETL_RUN_ID > par_ERI_PROC
   ) AS S
   ON M.MESSAGEREFID = S.MESSAGEREFID
   AND Coalesce(M.SENDINGENTITYIN, '') = Coalesce(S.SENDINGENTITYIN, '')
   AND M.TRANSMITTINGCOUNTRY = S.TRANSMITTINGCOUNTRY
   AND M.ETL_RUN_ID = S.ETL_RUN_ID
   WHERE M.TRANSMITTINGCOUNTRY <> 'NL';
   SET par_ACT_INS = Activity_Count;
   SET par_STEP = 1;
   SELECT Coalesce(Count(*),0) INTO par_DBL_REP
   FROM (
   SELECT SENDINGENTITYIN, TRANSMITTINGCOUNTRY, REPORTINGPERIOD, REPORTINGENTITYTIN, RE_NAME_KEY, Count(CBCBODYID) AS NR
   FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT
   WHERE ETL_RUN_ID > par_ERI_PROC
   AND START_DATE IS NOT NULL
   AND CURRENT_FLAG = 'Y'
   AND TRANSMITTINGCOUNTRY <> 'NL'
   GROUP BY SENDINGENTITYIN, TRANSMITTINGCOUNTRY, REPORTINGPERIOD, REPORTINGENTITYTIN, RE_NAME_KEY
   HAVING Count(CBCBODYID) > 1
   ) AS A;
   SET par_STEP = 2;
   IF par_DBL_REP = 0 THEN
      BEGIN
         UPDATE T;
         FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT AS T,
         DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT AS S
         SET END_DATE = S.START_DATE - INTERVAL '1' SECOND;
         , CURRENT_FLAG = 'N'
         WHERE Coalesce(T.SENDINGENTITYIN, '') = Coalesce(S.SENDINGENTITYIN, '')
         AND T.TRANSMITTINGCOUNTRY = S.TRANSMITTINGCOUNTRY
         AND T.REPORTINGPERIOD = S.REPORTINGPERIOD
         AND T.REPORTINGENTITYTIN = S.REPORTINGENTITYTIN
         AND T.RE_NAME_KEY = S.RE_NAME_KEY
         AND T.ETL_RUN_ID < S.ETL_RUN_ID
         AND S.ETL_RUN_ID > par_ERI_PROC
         AND S.START_DATE IS NOT NULL
         AND S.CURRENT_FLAG = 'Y'
         AND T.END_DATE IS NULL
         AND T.CURRENT_FLAG = 'Y'
         AND T.TRANSMITTINGCOUNTRY <> 'NL';
         SET par_ACT_UPD = Activity_Count;
         SET par_STEP = 3;
      END;
      ELSE
      BEGIN
         SET STMT1 = 'SELECT T.SENDINGENTITYIN;
         , T.TRANSMITTINGCOUNTRY
         , T.REPORTINGPERIOD
         , T.REPORTINGENTITYTIN
         , T.RE_NAME_KEY
         , T.ETL_RUN_ID
         , T.START_DATE
         FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT AS T
         WHERE T.START_DATE IS NOT NULL
         AND T.CURRENT_FLAG =  WITH UR''Y''
         AND T.TRANSMITTINGCOUNTRY <> ''NL''
         AND T.ETL_RUN_ID > ' || Trim(Cast(par_ERI_PROC AS VARCHAR(19))) || '
         ORDER BY T.ETL_RUN_ID, T.START_DATE, T.SENDINGENTITYIN, T.TRANSMITTINGCOUNTRY, T.REPORTINGENTITYTIN, T.RE_NAME_KEY;';
         PREPARE S1 FROM STMT1;
         OPEN cur_UPDATE;
         L1: LOOP
         FETCH cur_UPDATE INTO SEI, TC, RPER, REP, RENA, ERI, SD;
         IF (SqlCode > 0) THEN
            LEAVE L1;
         END
         SET STMT2 = 'UPDATE T;
         FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT AS T,
         (SELECT SENDINGENTITYIN
         , TRANSMITTINGCOUNTRY
         , REPORTINGPERIOD
         , REPORTINGENTITYTIN
         , RE_NAME_KEY
         , MAX(START_DATE) AS START_DATE
         FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT
         WHERE COALESCE(SENDINGENTITYIN,  WITH UR'''') = COALESCE(''' || CHAR(SEI) || ''', '''')
         AND TRANSMITTINGCOUNTRY = ''' || CHAR(TC) || '''
         AND REPORTINGPERIOD = DATE ''' || Cast(Cast(RPER AS DATE Format 'dd-mm-yyyy') AS DATE Format 'yyyy-mm-dd') || '''
         AND REPORTINGENTITYTIN = ''' || CHAR(REP) || '''
         AND RE_NAME_KEY = ''' || REPLACE(RENA, '''', '''''') || '''
         AND ETL_RUN_ID <= ' || CHAR(ERI) || '
         AND START_DATE < TIMESTAMP ''' || Cast( SD AS VARCHAR(25))  || '''
         AND END_DATE IS NULL
         GROUP BY SENDINGENTITYIN
         , TRANSMITTINGCOUNTRY
         , REPORTINGPERIOD
         , REPORTINGENTITYTIN
         , RE_NAME_KEY) AS S
         SET END_DATE = TIMESTAMP ''' || Cast( SD AS VARCHAR(25))  || ''' - INTERVAL ''1'' SECOND;
         , CURRENT_FLAG = ''N''
         WHERE COALESCE(T.SENDINGENTITYIN, '''') = COALESCE(S.SENDINGENTITYIN, '''')
         AND T.TRANSMITTINGCOUNTRY = S.TRANSMITTINGCOUNTRY
         AND T.REPORTINGPERIOD = S.REPORTINGPERIOD
         AND T.REPORTINGENTITYTIN = S.REPORTINGENTITYTIN
         AND T.RE_NAME_KEY = S.RE_NAME_KEY
         AND T.START_DATE = S.START_DATE
         AND T.END_DATE IS NULL;';
         EXECUTE IMMEDIATE STMT2;
         SET par_ACT_UPD = par_ACT_UPD + Activity_Count;
         SET par_STEP = 4;
      END LOOP L1;
      CLOSE cur_UPDATE;
   END;
END
   UPDATE T;
   FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT AS T,
   (  SELECT RE.SENDINGENTITYIN, RE.TRANSMITTINGCOUNTRY, R3.MESSAGEREFID, R3.CBCBODYID,
   RE.TIN, R3.RE_NAME_KEY, MS.REPORTINGPERIOD, R3.ETL_RUN_ID, R3.START_DATE, R3.END_DATE, R3.CURRENT_FLAG
   FROM DG_I_P_20GEG_CBCI.REPORTING_ENTITY AS RE
   INNER JOIN DG_I_P_30INF_CBCI.REPORTING_ENTITY AS R3
   ON RE.TRANSMITTINGCOUNTRY = R3.TRANSMITTINGCOUNTRY
   AND Coalesce(RE.SENDINGENTITYIN, '') = Coalesce(R3.SENDINGENTITYIN, '')
   AND RE.TIN = R3.TIN
   AND RE.CORRDOCREFID = R3.DOCREFID
   AND RE.ETL_RUN_ID >= R3.ETL_RUN_ID
   INNER JOIN DG_I_P_30INF_CBCI.MESSAGE_SPEC AS MS
   ON R3.TRANSMITTINGCOUNTRY = MS.TRANSMITTINGCOUNTRY
   AND Coalesce(R3.SENDINGENTITYIN, '') = Coalesce(MS.SENDINGENTITYIN, '')
   AND R3.MESSAGEREFID = MS.MESSAGEREFID
   AND R3.ETL_RUN_ID = MS.ETL_RUN_ID
   WHERE RE.DOCTYPEINDIC = 'OECD3'
   AND R3.END_DATE IS NOT NULL
   AND R3.CURRENT_FLAG = 'N'
   AND R3.ETL_RUN_ID > par_ERI_PROC
   ) AS S
   SET END_DATE = S.END_DATE - INTERVAL '1' SECOND;
   , CURRENT_FLAG = 'N'
   WHERE T.TRANSMITTINGCOUNTRY = S.TRANSMITTINGCOUNTRY
   AND Coalesce(T.SENDINGENTITYIN, '') = Coalesce(S.SENDINGENTITYIN, '')
   AND T.REPORTINGPERIOD = S.REPORTINGPERIOD
   AND T.REPORTINGENTITYTIN = S.TIN
   AND T.RE_NAME_KEY = S.RE_NAME_KEY
   AND T.START_DATE >= S.START_DATE
   AND T.ETL_RUN_ID >= S.ETL_RUN_ID
   AND T.END_DATE IS NULL;
   SET par_ACT_UPD = par_ACT_UPD + Activity_Count;
   SET par_STEP = 5;
   ET;
   SELECT Coalesce(Max(ETL_RUN_ID),NULL) INTO par_MAX_ETL_RUN_ID
   FROM DG_I_P_30INF_CBCI.MESSAGE_SPEC_REP_ENT
   WHERE TRANSMITTINGCOUNTRY <> 'NL';
   UPDATE DG_I_P_30INF_CBCI.RUNCONTROL_30;
   SET END_DATE = Current_Timestamp;
   , RUN_RESULT = 'Success'
   , RUN_COMMENT = Coalesce(RUN_COMMENT, '') || Trim(Cast(par_ACT_INS AS VARCHAR(11))) || ' records inserted; ' || Trim(Cast(par_ACT_UPD - par_ZERO_ROWS AS VARCHAR(11))) || ' records updated.';
   , ETL_RUN_ID_INT = par_MAX_ETL_RUN_ID
   WHERE COG_RUN_ID = par_COG_RUN_ID
   AND PROCEDURE_NUMBER = par_PROC_NR
   AND PROCEDURE_NAME = 'PROC_UPDATE_MESSAGE_SPEC_REP_ENT';
   SET par_STATUS = 0;
END@